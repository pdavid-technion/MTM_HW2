* commit bf9458d3c76ad14da8342053ee8ea9c58d5842ea
| Author: root <root@DESKTOP-7F7K97L>
| Date:   Wed Jul 10 14:20:38 2024 +0300
| 
|     merge conflicts try4
| 
| diff --git a/dry/main.cpp b/dry/main.cpp
| index 3bfa21c..fb100ed 100644
| --- a/dry/main.cpp
| +++ b/dry/main.cpp
| @@ -10,7 +10,6 @@ int main() {
|  
|      Pirate luffy("Luffy", GUM_GUM_FRUIT, 1000000);
|      Pirate zoro("Zoro", 500000);
| -    Pirate try("try", 500000);
|  
|  
|      const int crewSize = 2;
|   
*   commit 21282cb8ccf1a8b51d3d1fe4c7df33b994fda990
|\  Merge: 9a00f81 ef004c5
| | Author: root <root@DESKTOP-7F7K97L>
| | Date:   Wed Jul 10 14:18:14 2024 +0300
| | 
| |     merge devil_fruit
| | 
| * commit ef004c59ff3946b3b85d63cd58bc437a1f6957ed
| | Author: pdavid-technion <103374296+pdavid-technion@users.noreply.github.com>
| | Date:   Wed Jul 10 14:12:33 2024 +0300
| | 
| |     Update main.cpp
| | 
| | diff --git a/dry/main.cpp b/dry/main.cpp
| | index 1f9333f..2911f71 100644
| | --- a/dry/main.cpp
| | +++ b/dry/main.cpp
| | @@ -9,7 +9,6 @@ int main() {
| |  
| |      Pirate luffy("Luffy", GUM_GUM_FRUIT);
| |      Pirate zoro("Zoro");
| | -    Pirate try("try", 400000);
| |  
| |      const int crewSize = 2;
| |      
| | 
| * commit 4e21869afd7a47d439e9710bfbc2e1c946019399
| | Author: pdavid-technion <103374296+pdavid-technion@users.noreply.github.com>
| | Date:   Wed Jul 10 14:11:32 2024 +0300
| | 
| |     Update main.cpp
| | 
| | diff --git a/dry/main.cpp b/dry/main.cpp
| | index 2911f71..1f9333f 100644
| | --- a/dry/main.cpp
| | +++ b/dry/main.cpp
| | @@ -9,6 +9,7 @@ int main() {
| |  
| |      Pirate luffy("Luffy", GUM_GUM_FRUIT);
| |      Pirate zoro("Zoro");
| | +    Pirate try("try", 400000);
| |  
| |      const int crewSize = 2;
| |      
| | 
* | commit 9a00f81a6aebd4c1eb32eb784feddcaa5fa37f65
| | Author: root <root@DESKTOP-7F7K97L>
| | Date:   Wed Jul 10 14:10:11 2024 +0300
| | 
| |     merge conflicts try3
| | 
| | diff --git a/dry/main.cpp b/dry/main.cpp
| | index fb100ed..3bfa21c 100644
| | --- a/dry/main.cpp
| | +++ b/dry/main.cpp
| | @@ -10,6 +10,7 @@ int main() {
| |  
| |      Pirate luffy("Luffy", GUM_GUM_FRUIT, 1000000);
| |      Pirate zoro("Zoro", 500000);
| | +    Pirate try("try", 500000);
| |  
| |  
| |      const int crewSize = 2;
| | 
* | commit 2c8af9e93d88c14c4e6748c26c8aaf351cf0965d
| | Author: root <root@DESKTOP-7F7K97L>
| | Date:   Wed Jul 10 14:03:20 2024 +0300
| | 
| |     merge conflicts try2
| | 
| | diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
| | index f2c0282..a8c710d 100644
| | --- a/dry/Pirate.cpp
| | +++ b/dry/Pirate.cpp
| | @@ -1,15 +1,12 @@
| | -
| |  #include "Pirate.h"
| |  
| |  
| | -<<<<<<< HEAD
| | -Pirate::Pirate(const string& name): name(name), bounty(0) {}
| | -Pirate::Pirate(): name(""), bounty(0) {}
| | -Pirate::Pirate(const string& name, int bounty): name(name), bounty(bounty) {}
| | -=======
| | -Pirate::Pirate(const string& name, DEVIL_FRUIT devilFruit): name(name), devilFruit(devilFruit) {}
| |  
| | ->>>>>>> origin/devil_fruit
| | +Pirate::Pirate(const string& name): name(name), bounty(0), devilFruit(DEVIL_FRUIT::NONE) {}
| | +Pirate::Pirate(): name(""), bounty(0), devilFruit(DEVIL_FRUIT::NONE) {}
| | +Pirate::Pirate(const string& name, int bounty): name(name), bounty(bounty), devilFruit(DEVIL_FRUIT::NONE) {}
| | +Pirate::Pirate(const string& name, DEVIL_FRUIT devilFruit, int bounty): name(name), bounty(bounty), devilFruit(devilFruit) {}
| | +
| |  
| |  void Pirate::setName(const string& name){
| |      this->name = name;
| | @@ -42,11 +39,7 @@ const char* const devilFruitNames[] = {
| |  };
| |  
| |  std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
| | -<<<<<<< HEAD
| | -    os << "name: " << pirate.name << ", bounty: " << pirate.bounty;
| | -=======
| | -    os << pirate.name << " (Devil Fruit: " << devilFruitNames[pirate.devilFruit] << ")";
| | ->>>>>>> origin/devil_fruit
| | +    os << "name: " << pirate.name << ", bounty: " << pirate.bounty << " (Devil Fruit: " << devilFruitNames[pirate.devilFruit] << ")";
| |      return os;
| |  }
| |  
| | @@ -56,4 +49,4 @@ int Pirate::getBounty(){
| |  
| |  void Pirate::setBounty(int bounty){
| |      this->bounty = bounty;
| | -}
| | +}
| | \ No newline at end of file
| | diff --git a/dry/Pirate.h b/dry/Pirate.h
| | index 4a7cdfa..708ce95 100644
| | --- a/dry/Pirate.h
| | +++ b/dry/Pirate.h
| | @@ -18,20 +18,14 @@ enum DEVIL_FRUIT {
| |  class Pirate {
| |  private:
| |      string name;
| | -<<<<<<< HEAD
| |      int bounty;
| | +    DEVIL_FRUIT devilFruit;
| |  
| |  public:
| |      Pirate(const string& name);
| |      Pirate();
| |      Pirate(const string& name, int bounty);
| | -=======
| | -    DEVIL_FRUIT devilFruit;
| | -
| | -public:
| | -    Pirate(const string& name, DEVIL_FRUIT devilFruit = DEVIL_FRUIT::NONE);
| | -
| | ->>>>>>> origin/devil_fruit
| | +    Pirate(const string& name, DEVIL_FRUIT devilFruit, int bounty);
| |      ~Pirate() = default;
| |  
| |      int getBounty();
| | @@ -44,4 +38,4 @@ public:
| |      DEVIL_FRUIT getDevilFruit();
| |  
| |      friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);
| | -};
| | +};
| | \ No newline at end of file
| | diff --git a/dry/main.cpp b/dry/main.cpp
| | index f8573f5..fb100ed 100644
| | --- a/dry/main.cpp
| | +++ b/dry/main.cpp
| | @@ -7,13 +7,10 @@ using std::cout, std::endl;
| |  
| |  int main() {
| |  
| | -<<<<<<< HEAD
| | -    Pirate luffy("Luffy", 1000000);
| | +
| | +    Pirate luffy("Luffy", GUM_GUM_FRUIT, 1000000);
| |      Pirate zoro("Zoro", 500000);
| | -=======
| | -    Pirate luffy("Luffy", GUM_GUM_FRUIT);
| | -    Pirate zoro("Zoro");
| | ->>>>>>> origin/devil_fruit
| | +
| |  
| |      const int crewSize = 2;
| |      
| | @@ -27,4 +24,4 @@ int main() {
| |      }
| |  
| |      return 0;
| | -}
| | +}
| | \ No newline at end of file
| | 
* | commit 8290910c8d606352203ee3d1091a5930ab1dce47
| | Author: root <root@DESKTOP-7F7K97L>
| | Date:   Wed Jul 10 13:58:01 2024 +0300
| | 
| |     merge conflicts try1
| | 
| | diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
| | index 986adf9..f2c0282 100644
| | --- a/dry/Pirate.cpp
| | +++ b/dry/Pirate.cpp
| | @@ -2,12 +2,14 @@
| |  #include "Pirate.h"
| |  
| |  
| | +<<<<<<< HEAD
| | +Pirate::Pirate(const string& name): name(name), bounty(0) {}
| | +Pirate::Pirate(): name(""), bounty(0) {}
| | +Pirate::Pirate(const string& name, int bounty): name(name), bounty(bounty) {}
| | +=======
| | +Pirate::Pirate(const string& name, DEVIL_FRUIT devilFruit): name(name), devilFruit(devilFruit) {}
| |  
| | -Pirate::Pirate(const string& name): name(name), bounty(0), devilFruit(DEVIL_FRUIT::NONE) {}
| | -Pirate::Pirate(): name(""), bounty(0), devilFruit(DEVIL_FRUIT::NONE) {}
| | -Pirate::Pirate(const string& name, int bounty): name(name), bounty(bounty), devilFruit(DEVIL_FRUIT::NONE) {}
| | -Pirate::Pirate(const string& name, DEVIL_FRUIT devilFruit, int bounty): name(name), bounty(bounty), devilFruit(devilFruit) {}
| | -
| | +>>>>>>> origin/devil_fruit
| |  
| |  void Pirate::setName(const string& name){
| |      this->name = name;
| | @@ -40,7 +42,11 @@ const char* const devilFruitNames[] = {
| |  };
| |  
| |  std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
| | -    os << "name: " << pirate.name << ", bounty: " << pirate.bounty << " (Devil Fruit: " << devilFruitNames[pirate.devilFruit] << ")";
| | +<<<<<<< HEAD
| | +    os << "name: " << pirate.name << ", bounty: " << pirate.bounty;
| | +=======
| | +    os << pirate.name << " (Devil Fruit: " << devilFruitNames[pirate.devilFruit] << ")";
| | +>>>>>>> origin/devil_fruit
| |      return os;
| |  }
| |  
| | diff --git a/dry/Pirate.h b/dry/Pirate.h
| | index b73c4bf..4a7cdfa 100644
| | --- a/dry/Pirate.h
| | +++ b/dry/Pirate.h
| | @@ -18,14 +18,20 @@ enum DEVIL_FRUIT {
| |  class Pirate {
| |  private:
| |      string name;
| | +<<<<<<< HEAD
| |      int bounty;
| | -    DEVIL_FRUIT devilFruit;
| |  
| |  public:
| |      Pirate(const string& name);
| |      Pirate();
| |      Pirate(const string& name, int bounty);
| | -    Pirate(const string& name, DEVIL_FRUIT devilFruit, int bounty);
| | +=======
| | +    DEVIL_FRUIT devilFruit;
| | +
| | +public:
| | +    Pirate(const string& name, DEVIL_FRUIT devilFruit = DEVIL_FRUIT::NONE);
| | +
| | +>>>>>>> origin/devil_fruit
| |      ~Pirate() = default;
| |  
| |      int getBounty();
| | diff --git a/dry/main.cpp b/dry/main.cpp
| | index eaec32f..f8573f5 100644
| | --- a/dry/main.cpp
| | +++ b/dry/main.cpp
| | @@ -7,10 +7,13 @@ using std::cout, std::endl;
| |  
| |  int main() {
| |  
| | -
| | -    Pirate luffy("Luffy", GUM_GUM_FRUIT, 1000000);
| | +<<<<<<< HEAD
| | +    Pirate luffy("Luffy", 1000000);
| |      Pirate zoro("Zoro", 500000);
| | -
| | +=======
| | +    Pirate luffy("Luffy", GUM_GUM_FRUIT);
| | +    Pirate zoro("Zoro");
| | +>>>>>>> origin/devil_fruit
| |  
| |      const int crewSize = 2;
| |      
| | 
* | commit 60dfd73b9d4292294d8282bf6a9a93ff2a6a57e4
|\| Merge: 1bf1029 568c994
| | Author: root <root@DESKTOP-7F7K97L>
| | Date:   Wed Jul 10 13:53:23 2024 +0300
| | 
| |     merge conflicts
| | 
| * commit 568c99477019f8cd7db1c7b7f5a9efd4ae0658ff
| | Author: AdiHarif <adi.harif@campus.technion.ac.il>
| | Date:   Mon Jul 1 06:55:20 2024 +0300
| | 
| |     Adds Devil Fruit Feature
| | 
| | diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
| | index c96892e..fc3c314 100644
| | --- a/dry/Pirate.cpp
| | +++ b/dry/Pirate.cpp
| | @@ -2,7 +2,7 @@
| |  #include "Pirate.h"
| |  
| |  
| | -Pirate::Pirate(const string& name): name(name) {}
| | +Pirate::Pirate(const string& name, DEVIL_FRUIT devilFruit): name(name), devilFruit(devilFruit) {}
| |  
| |  
| |  void Pirate::setName(const string& name){
| | @@ -10,12 +10,32 @@ void Pirate::setName(const string& name){
| |  }
| |  
| |  
| | +void Pirate::setDevilFruit(DEVIL_FRUIT devilFruit){
| | +    this->devilFruit = devilFruit;
| | +}
| | +
| | +
| |  std::string Pirate::getName(){
| |      return name;
| |  }
| |  
| |  
| | +DEVIL_FRUIT Pirate::getDevilFruit(){
| | +    return devilFruit;
| | +}
| | +
| | +
| | +const char* const devilFruitNames[] = {
| | +    "Gum Gum",
| | +    "Smoke Smoke",
| | +    "Flame Flame",
| | +    "Rumble Rumble",
| | +    "String String",
| | +    "Ice Ice",
| | +    "None"
| | +};
| | +
| |  std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
| | -    os << pirate.name;
| | +    os << pirate.name << " (Devil Fruit: " << devilFruitNames[pirate.devilFruit] << ")";
| |      return os;
| |  }
| | diff --git a/dry/Pirate.h b/dry/Pirate.h
| | index 7769667..4c044b1 100644
| | --- a/dry/Pirate.h
| | +++ b/dry/Pirate.h
| | @@ -5,18 +5,31 @@
| |  
| |  using std::string;
| |  
| | +enum DEVIL_FRUIT {
| | +    GUM_GUM_FRUIT,
| | +    SMOKE_SMOKE_FRUIT,
| | +    FLAME_FLAME_FRUIT,
| | +    RUMBLE_RUMBLE_FRUIT,
| | +    STRING_STRING_FRUIT,
| | +    ICE_ICE_FRUIT,
| | +    NONE
| | +};
| | +
| |  class Pirate {
| |  private:
| |      string name;
| | +    DEVIL_FRUIT devilFruit;
| |  
| |  public:
| | -    Pirate(const string& name);
| | +    Pirate(const string& name, DEVIL_FRUIT devilFruit = DEVIL_FRUIT::NONE);
| |  
| |      ~Pirate() = default;
| |  
| |      void setName(const string& name);
| | +    void setDevilFruit(DEVIL_FRUIT devilFruit);
| |  
| |      string getName();
| | +    DEVIL_FRUIT getDevilFruit();
| |  
| |      friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);
| |  };
| | diff --git a/dry/main.cpp b/dry/main.cpp
| | index 6b659a1..2911f71 100644
| | --- a/dry/main.cpp
| | +++ b/dry/main.cpp
| | @@ -7,7 +7,7 @@ using std::cout, std::endl;
| |  
| |  int main() {
| |  
| | -    Pirate luffy("Luffy");
| | +    Pirate luffy("Luffy", GUM_GUM_FRUIT);
| |      Pirate zoro("Zoro");
| |  
| |      const int crewSize = 2;
| | 
* | commit 1bf1029de5974e572c1081205f3170ed071142b2
| | Author: root <root@DESKTOP-7F7K97L>
| | Date:   Wed Jul 10 13:29:25 2024 +0300
| | 
| |     adding bounty property
| | 
| | diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
| | index 76b707d..8463ce5 100644
| | --- a/dry/Pirate.cpp
| | +++ b/dry/Pirate.cpp
| | @@ -2,8 +2,9 @@
| |  #include "Pirate.h"
| |  
| |  
| | -Pirate::Pirate(const string& name): name(name) {}
| | -Pirate::Pirate(): name("") {}
| | +Pirate::Pirate(const string& name): name(name), bounty(0) {}
| | +Pirate::Pirate(): name(""), bounty(0) {}
| | +Pirate::Pirate(const string& name, int bounty): name(name), bounty(bounty) {}
| |  
| |  void Pirate::setName(const string& name){
| |      this->name = name;
| | @@ -16,6 +17,14 @@ std::string Pirate::getName(){
| |  
| |  
| |  std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
| | -    os << pirate.name;
| | +    os << "name: " << pirate.name << ", bounty: " << pirate.bounty;
| |      return os;
| |  }
| | +
| | +int Pirate::getBounty(){
| | +    return this->bounty;
| | +}
| | +
| | +void Pirate::setBounty(int bounty){
| | +    this->bounty = bounty;
| | +}
| | diff --git a/dry/Pirate.h b/dry/Pirate.h
| | index 5cdfc27..046ae29 100644
| | --- a/dry/Pirate.h
| | +++ b/dry/Pirate.h
| | @@ -8,12 +8,17 @@ using std::string;
| |  class Pirate {
| |  private:
| |      string name;
| | +    int bounty;
| |  
| |  public:
| |      Pirate(const string& name);
| |      Pirate();
| | +    Pirate(const string& name, int bounty);
| |      ~Pirate() = default;
| |  
| | +    int getBounty();
| | +    void setBounty(int bounty);
| | +
| |      void setName(const string& name);
| |  
| |      string getName();
| | diff --git a/dry/main.cpp b/dry/main.cpp
| | index 6b659a1..56c480c 100644
| | --- a/dry/main.cpp
| | +++ b/dry/main.cpp
| | @@ -7,8 +7,8 @@ using std::cout, std::endl;
| |  
| |  int main() {
| |  
| | -    Pirate luffy("Luffy");
| | -    Pirate zoro("Zoro");
| | +    Pirate luffy("Luffy", 1000000);
| | +    Pirate zoro("Zoro", 500000);
| |  
| |      const int crewSize = 2;
| |      
| | 
* | commit be811097b65f4bd3cff4b6d0b9d5555770398c1d
| | Author: root <root@DESKTOP-7F7K97L>
| | Date:   Wed Jul 10 13:27:00 2024 +0300
| | 
| |     adding constructor
| | 
| | diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
| | index c96892e..76b707d 100644
| | --- a/dry/Pirate.cpp
| | +++ b/dry/Pirate.cpp
| | @@ -3,7 +3,7 @@
| |  
| |  
| |  Pirate::Pirate(const string& name): name(name) {}
| | -
| | +Pirate::Pirate(): name("") {}
| |  
| |  void Pirate::setName(const string& name){
| |      this->name = name;
| | diff --git a/dry/Pirate.h b/dry/Pirate.h
| | index 7769667..5cdfc27 100644
| | --- a/dry/Pirate.h
| | +++ b/dry/Pirate.h
| | @@ -11,7 +11,7 @@ private:
| |  
| |  public:
| |      Pirate(const string& name);
| | -
| | +    Pirate();
| |      ~Pirate() = default;
| |  
| |      void setName(const string& name);
| | 
* | commit a4c954a3d77adff7c45bab8b97d133d8dcb382d7
| | Author: Adi Harif <adi.harif@campus.technion.ac.il>
| | Date:   Sun Jul 7 18:39:14 2024 +0300
| | 
| |     [Bug Fix] Adds missing include iostream to tests.cpp
| | 
| | diff --git a/wet/tests.cpp b/wet/tests.cpp
| | index 1096726..b2eed07 100644
| | --- a/wet/tests.cpp
| | +++ b/wet/tests.cpp
| | @@ -1,6 +1,7 @@
| |  
| |  
| |  #include <string>
| | +#include <iostream>
| |  
| |  #include "Matrix.h"
| |  #include "MataMvidia.h"
| | 
* | commit a43d71a48a0f89861959865ef26539eb23d4a210
|/  Author: AdiHarif <adi.harif@campus.technion.ac.il>
|   Date:   Fri Jul 5 13:28:31 2024 +0300
|   
|       [Bug Fix] Changes test to conform matrix indexing conventions
|   
|   diff --git a/wet/test.expected b/wet/test.expected
|   index cec9191..f50f629 100644
|   --- a/wet/test.expected
|   +++ b/wet/test.expected
|   @@ -1,19 +1,19 @@
|   -|5|7|
|   -|6|8|
|   +|5|6|
|   +|7|8|
|    
|    Movie Name: MataMatrix
|    Author: Adi Harif
|    
|    Frame 0:
|   -|1|3|
|   -|2|4|
|   +|1|2|
|   +|3|4|
|    
|    Frame 1:
|   -|5|7|
|   -|6|8|
|   +|5|6|
|   +|7|8|
|    
|    Frame 2:
|   -|1|3|
|   -|2|4|
|   +|1|2|
|   +|3|4|
|    
|    -----End of Movie-----
|   diff --git a/wet/tests.cpp b/wet/tests.cpp
|   index 29d3700..1096726 100644
|   --- a/wet/tests.cpp
|   +++ b/wet/tests.cpp
|   @@ -50,10 +50,10 @@ bool testMatrix(std::ostream& out) {
|    
|        Matrix m4 = m1 * m2;
|        m4 *= 1;
|   -    ASSERT_TEST(m4(0,0) == 23);
|   -    ASSERT_TEST(m4(0,1) == 34);
|   -    ASSERT_TEST(m4(1,0) == 31);
|   -    ASSERT_TEST(m4(1,1) == 46);
|   +    ASSERT_TEST(m4(0,0) == 19);
|   +    ASSERT_TEST(m4(0,1) == 22);
|   +    ASSERT_TEST(m4(1,0) == 43);
|   +    ASSERT_TEST(m4(1,1) == 50);
|    
|        m1 += m2;
|        m1 *= m2;
| 
* commit 6a3961cca0991920b83a3e221eccfed187c75d2f
| Author: AdiHarif <adi.harif@campus.technion.ac.il>
| Date:   Mon Jul 1 06:33:07 2024 +0300
| 
|     Adds dry part supplied files
| 
| diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
| new file mode 100644
| index 0000000..c96892e
| --- /dev/null
| +++ b/dry/Pirate.cpp
| @@ -0,0 +1,21 @@
| +
| +#include "Pirate.h"
| +
| +
| +Pirate::Pirate(const string& name): name(name) {}
| +
| +
| +void Pirate::setName(const string& name){
| +    this->name = name;
| +}
| +
| +
| +std::string Pirate::getName(){
| +    return name;
| +}
| +
| +
| +std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
| +    os << pirate.name;
| +    return os;
| +}
| diff --git a/dry/Pirate.h b/dry/Pirate.h
| new file mode 100644
| index 0000000..7769667
| --- /dev/null
| +++ b/dry/Pirate.h
| @@ -0,0 +1,22 @@
| +
| +#pragma once
| +
| +#include <iostream>
| +
| +using std::string;
| +
| +class Pirate {
| +private:
| +    string name;
| +
| +public:
| +    Pirate(const string& name);
| +
| +    ~Pirate() = default;
| +
| +    void setName(const string& name);
| +
| +    string getName();
| +
| +    friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);
| +};
| diff --git a/dry/main.cpp b/dry/main.cpp
| new file mode 100644
| index 0000000..6b659a1
| --- /dev/null
| +++ b/dry/main.cpp
| @@ -0,0 +1,25 @@
| +#include <iostream>
| +#include "Pirate.h"
| +#include <cstring>
| +
| +using std::cout, std::endl;
| +
| +
| +int main() {
| +
| +    Pirate luffy("Luffy");
| +    Pirate zoro("Zoro");
| +
| +    const int crewSize = 2;
| +    
| +    Pirate strawHatCrew[2];
| +    strawHatCrew[0] = luffy;
| +    strawHatCrew[1] = zoro;
| +    
| +    cout << "Straw Hat crew contains:" << endl;
| +    for (int i = 0; i < crewSize; i++) {
| +        cout << strawHatCrew[i] << endl;
| +    }
| +
| +    return 0;
| +}
| 
* commit 4c85f22824d4e2b99a1bf5c9a25a2a8bf5438e00
| Author: AdiHarif <adi.harif@campus.technion.ac.il>
| Date:   Mon Jul 1 06:32:00 2024 +0300
| 
|     Adds wet part supplied files
| 
| diff --git a/wet/Utilities.cpp b/wet/Utilities.cpp
| new file mode 100644
| index 0000000..6a31ec7
| --- /dev/null
| +++ b/wet/Utilities.cpp
| @@ -0,0 +1,20 @@
| +
| +#include "Utilities.h"
| +
| +#include <iostream>
| +
| +using std::cerr;
| +
| +
| +void exitWithError(MatamErrorType error) {
| +    std::cerr << "Matam Error: ";
| +    switch (error) {
| +        case MatamErrorType::UnmatchedSizes:
| +            std::cerr << "Unmatched matrices" << std::endl;
| +            break;
| +        case MatamErrorType::OutOfBounds:
| +            std::cerr << "Out of bounds" << std::endl;
| +            break;
| +    }
| +    exit(1);
| +}
| diff --git a/wet/Utilities.h b/wet/Utilities.h
| new file mode 100644
| index 0000000..984505a
| --- /dev/null
| +++ b/wet/Utilities.h
| @@ -0,0 +1,9 @@
| +
| +#pragma once
| +
| +enum class MatamErrorType {
| +    UnmatchedSizes,
| +    OutOfBounds
| +};
| +
| +void exitWithError(MatamErrorType error);
| diff --git a/wet/test.expected b/wet/test.expected
| new file mode 100644
| index 0000000..cec9191
| --- /dev/null
| +++ b/wet/test.expected
| @@ -0,0 +1,19 @@
| +|5|7|
| +|6|8|
| +
| +Movie Name: MataMatrix
| +Author: Adi Harif
| +
| +Frame 0:
| +|1|3|
| +|2|4|
| +
| +Frame 1:
| +|5|7|
| +|6|8|
| +
| +Frame 2:
| +|1|3|
| +|2|4|
| +
| +-----End of Movie-----
| diff --git a/wet/tests.cpp b/wet/tests.cpp
| new file mode 100644
| index 0000000..29d3700
| --- /dev/null
| +++ b/wet/tests.cpp
| @@ -0,0 +1,129 @@
| +
| +
| +#include <string>
| +
| +#include "Matrix.h"
| +#include "MataMvidia.h"
| +
| +using namespace std;
| +typedef bool (*testFunc)(void);
| +
| +bool testMatrix(std::ostream& out);
| +bool testMataMvidia(std::ostream& out);
| +
| +
| +#define ASSERT_TEST(expr)                                                      \
| +do {                                                                           \
| +    if (!(expr)) {                                                             \
| +        std::cout << "\nAssertion failed at ";                                 \
| +        std::cout << __FILE__ << ":" << __LINE__ << ": " << #expr << std::endl;\
| +        exit(1);                                                               \
| +    }                                                                          \
| +} while (0)
| +
| +
| +int main() {
| +    testMatrix(std::cout);
| +    testMataMvidia(std::cout);
| +    return 0;
| +}
| +
| +bool testMatrix(std::ostream& out) {
| +    Matrix m1(2,2);
| +    Matrix m2(2,2);
| +
| +    m1(0,0) = 1;
| +    m1(0,1) = 2;
| +    m1(1,0) = 3;
| +    m1(1,1) = 4;
| +
| +    m2(0,0) = 5;
| +    m2(0,1) = 6;
| +    m2(1,0) = 7;
| +    m2(1,1) = 8;
| +
| +    Matrix m3 = m1 + m2;
| +    ASSERT_TEST(m3(0,0) == 6);
| +    ASSERT_TEST(m3(0,1) == 8);
| +    ASSERT_TEST(m3(1,0) == 10);
| +    ASSERT_TEST(m3(1,1) == 12);
| +
| +    Matrix m4 = m1 * m2;
| +    m4 *= 1;
| +    ASSERT_TEST(m4(0,0) == 23);
| +    ASSERT_TEST(m4(0,1) == 34);
| +    ASSERT_TEST(m4(1,0) == 31);
| +    ASSERT_TEST(m4(1,1) == 46);
| +
| +    m1 += m2;
| +    m1 *= m2;
| +    m1 -= m2;
| +    m1 = m3 - m2;
| +
| +    ASSERT_TEST(-m1 == -1*m1);
| +    ASSERT_TEST(-m1 == m1*-1);
| +
| +    ASSERT_TEST(m2.rotateClockwise().rotateCounterClockwise() == m2);
| +
| +    ASSERT_TEST(m1.transpose().transpose() == m1);
| +
| +    out << m2 << std::endl;
| +
| +    return true;
| +}
| +
| +bool testMataMvidia(std::ostream& out) {
| +    Matrix frame1(2,2);
| +    Matrix frame2(2,2);
| +
| +    frame1(0,0) = 1;
| +    frame1(0,1) = 2;
| +    frame1(1,0) = 3;
| +    frame1(1,1) = 4;
| +
| +    frame2(0,0) = 5;
| +    frame2(0,1) = 6;
| +    frame2(1,0) = 7;
| +    frame2(1,1) = 8;
| +
| +    Matrix array[2];
| +    array[0] = frame1;
| +    array[1] = frame2;
| +
| +    MataMvidia movie("MataMatrix","Adi Harif",array, 2);
| +
| +    ASSERT_TEST(movie[0] == frame1);
| +
| +    movie += frame1;
| +
| +    ASSERT_TEST(movie[2] == frame1);
| +
| +    Matrix frame01(2,2);
| +    Matrix frame11(2,2);
| +
| +    frame01(0,0) = 10;
| +    frame01(0,1) = 20;
| +    frame01(1,0) = 30;
| +    frame01(1,1) = 40;
| +
| +    frame11(0,0) = 50;
| +    frame11(0,1) = 60;
| +    frame11(1,0) = 70;
| +    frame11(1,1) = 80;
| +
| +    Matrix array1[2];
| +    array1[0] = frame01;
| +    array1[1] = frame11;
| +
| +    MataMvidia movie1("MataMatrix and the chamber of secrets","Adi Harif",array1, 2);
| +
| +    ASSERT_TEST(movie1[0] == frame01);
| +
| +    //test output
| +    out << movie;
| +
| +    MataMvidia movie2 = movie + movie1;
| +    movie += movie1;
| +
| +    return true;
| +}
| 
* commit baae84e2cdd2960caa8258a8a7fb56f86253114b
  Author: AdiHarif <adi.harif@campus.technion.ac.il>
  Date:   Mon Jul 1 06:30:35 2024 +0300
  
      Initial Commit - Adds README.md
  
  diff --git a/README.md b/README.md
  new file mode 100644
  index 0000000..29b9a75
  --- /dev/null
  +++ b/README.md
  @@ -0,0 +1,7 @@
  +# Matam Homework 2
  +
  +This repository contains all supplied files for the second homework assignment in the course "Introduction to Systems Programming" (234124) at the Technion.
  +
  +You may find the full instructions for this assignment on the [course's website](https://moodle2324.technion.ac.il/course/view.php?id=3205).
  +
  +Good luck and have fun!
